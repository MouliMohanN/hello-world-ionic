
import java.security.MessageDigest

apply plugin: 'com.android.application'

android {
    namespace "com.example.app"
    compileSdk rootProject.ext.compileSdkVersion
    defaultConfig {
        applicationId "com.example.app"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        aaptOptions {
             // Files and dirs to omit from the packaged assets dir, modified to accommodate modern web apps.
             // Default: https://android.googlesource.com/platform/frameworks/base/+/282e181b58cf72b6ca770dc7ca5f91f135444502/tools/aapt/AaptAssets.cpp#61
            ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:.*:!CVS:!thumbs.db:!picasa.ini:!*~'
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}


// Helper function to calculate a file's hash
def computeFileHash(file) {
  def digest = MessageDigest.getInstance("SHA-256")
  file.withInputStream { inputStream ->
    def buffer = new byte[8192]
    def bytesRead
    while ((bytesRead = inputStream.read(buffer)) != -1) {
      digest.update(buffer, 0, bytesRead)
    }
  }
  return digest.digest().collect { String.format("%02x", it) }.join("")
}

// Dynamically create tasks for each variant
android.applicationVariants.all { variant ->
  def variantName = variant.name // e.g., debug, release

  task "hashManifest${variantName.capitalize()}" {
    group = "verification" // Optional: Group in Gradle task list
    description = "Compute hash for AndroidManifest.xml for ${variantName} variant"

    doLast {
      def apkPath = "${buildDir}/outputs/apk/${variantName}/app-${variantName}.apk" // Replace with your APK path
      def outputDir = file("${buildDir}/outputs/extracted_manifest")
      outputDir.mkdirs()

      def manifestFile = new File(outputDir, "AndroidManifest.xml")
      def apkFile = file(apkPath)

      if (!apkFile.exists()) {
        throw new GradleException("APK file not found at: ${apkPath}")
      }

      println("APK found at: ${apkPath}")

      // Extract the binary AndroidManifest.xml from the APK
      ant.unzip(src: apkPath, dest: outputDir) {
        patternset {
          include(name: "AndroidManifest.xml")
        }
      }

      if (manifestFile.exists()) {
        // Compute the hash of the binary file
        def digest = MessageDigest.getInstance("SHA-256")
        manifestFile.withInputStream { input ->
          byte[] buffer = new byte[8192]
          int bytesRead
          while ((bytesRead = input.read(buffer)) != -1) {
            digest.update(buffer, 0, bytesRead)
          }
        }
        def manifestHash = digest.digest().collect { String.format("%02x", it) }.join("")
        println("Binary AndroidManifest.xml Hash: ${manifestHash}")

        // Optionally save the hash to a file
        def hashFile = new File(outputDir, "manifest_hash.txt")
        hashFile.text = manifestHash
        println("Hash saved to ${hashFile.path}")
      } else {
        println("Binary AndroidManifest.xml not found in the APK.")
      }
    }
  }

  // Optionally, run this task after the variant is assembled
  tasks["assemble${variantName.capitalize()}"].finalizedBy("hashManifest${variantName.capitalize()}")
}

tasks.withType(JavaCompile).configureEach {
  options.fork = true
  options.incremental = true
}

repositories {
    flatDir{
        dirs '../capacitor-cordova-android-plugins/src/main/libs', 'libs'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "androidx.appcompat:appcompat:$androidxAppCompatVersion"
    implementation "androidx.coordinatorlayout:coordinatorlayout:$androidxCoordinatorLayoutVersion"
    implementation 'com.google.android.material:material:1.12.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.2.0'

    implementation "androidx.core:core-splashscreen:$coreSplashScreenVersion"
    implementation project(':capacitor-android')
    testImplementation "junit:junit:$junitVersion"
    androidTestImplementation "androidx.test.ext:junit:$androidxJunitVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$androidxEspressoCoreVersion"
    implementation project(':capacitor-cordova-android-plugins')

}

apply from: 'capacitor.build.gradle'
apply plugin: 'org.jetbrains.kotlin.android'

try {
    def servicesJSON = file('google-services.json')
    if (servicesJSON.text) {
        apply plugin: 'com.google.gms.google-services'
    }
} catch(Exception e) {
    logger.info("google-services.json not found, google-services plugin not applied. Push Notifications won't work")
}
